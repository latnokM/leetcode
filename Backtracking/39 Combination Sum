Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]
Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]


class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> comb;
        findCombSum(candidates, 0, target, comb, res);
        return res;        
    }
    
    void findCombSum(vector<int> &candidates, int start, int target, 
                     vector<int> &comb, vector<vector<int>> & res) {
        if(target < 0) return;
        else if(target == 0) {
            res.push_back(comb);
            return;
        }
        
        for(int i = start; i < candidates.size(); ++i) {
            comb.push_back(candidates[i]);
            target -= candidates[i];
            findCombSum(candidates, i, target, comb, res);
            comb.pop_back();
            target += candidates[i];
        }
    }
};
