Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

//O(n!)
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        getPermute(nums, 0, res);
        return res;
    }
    
    void getPermute(vector<int> &nums, int start, vector<vector<int>> &res) {
        //element before start has been permutated. now permutate [start...n]
        if(start >= nums.size()) {
            res.push_back(nums);
            return;
        }
        
        for(int i = start; i < nums.size(); ++i) {
            //swap i with start
            swap(nums[start], nums[i]);
            getPermute(nums, start + 1, res);
            swap(nums[start], nums[i]);
        }
    }
};
