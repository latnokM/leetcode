Numbers can be regarded as product of its factors. For example,

8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.

Note:

You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Example 1:

Input: 1
Output: []
Example 2:

Input: 37
Output:[]
Example 3:

Input: 12
Output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
Example 4:

Input: 32
Output:
[
  [2, 16],
  [2, 2, 8],
  [2, 2, 2, 4],
  [2, 2, 2, 2, 2],
  [2, 4, 4],
  [4, 8]
]

//O(nlogn)
class Solution {
public:
    vector<vector<int>> getFactors(int n) {
        vector<vector<int>> res;
        vector<int> comb;
        getFactorComb(n, comb, res);
        return res;        
    }
    
    void getFactorComb(int n, vector<int> &comb, vector<vector<int>> &res) {
        int i = comb.empty() ? 2 : comb.back();
        for(; i <= sqrt(n); ++i) {
            if(n % i == 0) {
                comb.push_back(i);
                comb.push_back(n / i);  //got a comb
                res.push_back(comb);
                comb.pop_back();
                getFactorComb(n / i, comb, res);
                comb.pop_back();
            }  
        }
    }
};
