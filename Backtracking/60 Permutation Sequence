The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"


//time O(n^2) because nums.erase is O(n)
class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int> nums;
        int factorial(1);
        string res;
        for(int i = 0; i < n; ++i) {
            nums.push_back(i + 1);
            factorial *= (i + 1);  //total number of permutations
        }
        
        k--;  //IMPORTANT: index starts 0
        
        //get num one by one
        for(int i = 0; i < n; i++) {
            //n groups, each group has (n-1)! permutations
            factorial /= nums.size(); //factorial = (n - 1)!
            int group = k / factorial;
            int num = nums[group];
            nums.erase(nums.begin() + group);   //O(n)
            k = k % factorial;
            res += to_string(num);
        }
        return res;    
    }
};
