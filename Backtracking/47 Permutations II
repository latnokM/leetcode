Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(), nums.end());
        getPermute(nums, 0, res);
        return res;
    }
    
    void getPermute(vector<int> &nums, int start, vector<vector<int>> &res) {
        if(start >= nums.size()) {
            res.push_back(nums);
            return;
        }
        
        for(int i = start; i < nums.size(); ++i) {
            if(i == start || nums[i] != nums[i - 1]) {
                swap(nums[start], nums[i]);
                getPermute(nums, start + 1, res);   //NOTE: start + 1, not i + 1
            }
        }
    }
};
