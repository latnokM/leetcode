Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be 
used and each combination should be a unique set of numbers.

Note:

All numbers will be positive integers.
The solution set must not contain duplicate combinations.
Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        vector<int> comb;
        findCombSum(1, k, n, comb, res);
        return res;        
    }
    
    void findCombSum(int start, int k, int n, vector<int> &comb, vector<vector<int>> &res) {
        if(n == 0 && comb.size() == k) {
            res.push_back(comb);
            return;
        }
        
        for(int i = start; i <= min(n, 9) && comb.size() < k; ++i) {
            comb.push_back(i);
            findCombSum(i + 1, k, n - i, comb, res);
            comb.pop_back();            
        }
    }
};
