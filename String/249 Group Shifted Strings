Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". 
We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

Example:

Input: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"],
Output: 
[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]

class Solution {
public:
    vector<vector<string>> groupStrings(vector<string>& strings) {
        //shit str to start with 'a' as key
        unordered_map<string, vector<string>> map;
        for(string s : strings) {
            string t;
            if(!s.empty()) {
                int offset(s[0] - 'a');
                for(char c : s) {
                    //do we have enouth offset to shift?
                    if(c - 'a' < offset)
                        t += c + 26 - offset;
                    else
                        t += c - offset; 
                }        
            }
            map[t].push_back(s);
        }
        
        vector<vector<string>> res;
        for(auto entry : map)
            res.push_back(entry.second);
        return res;        
    }
};
