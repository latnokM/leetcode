Given an input string , reverse the string word by word. 

Example:

Input:  ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Note: 

A word is defined as a sequence of non-space characters.
The input string does not contain leading or trailing spaces.
The words are always separated by a single space.
Follow up: Could you do it in-place without allocating extra space?

//O(n), O(1)
class Solution {
public:
    void reverse(vector<char> &str, int start, int end) {
        while(start < end)
            swap(str[start++], str[end--]);
    }
    
    void reverseWords(vector<char>& str) {
        int start(0), end(0), n(str.size());
        while(end < n) {
            if(str[end] == ' ') {
                reverse(str, start, end - 1);
                start = end + 1;
            }
            else if(end == n - 1)
                reverse(str, start, end);
            end++;
        }
        reverse(str, 0, n - 1);
    }
};
