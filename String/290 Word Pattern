Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Example 1:

Input: pattern = "abba", str = "dog cat cat dog"
Output: true
Example 2:

Input:pattern = "abba", str = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", str = "dog cat cat dog"
Output: false
Example 4:

Input: pattern = "abba", str = "dog dog dog dog"
Output: false
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters that may be separated by a single space.

//O(n), space O(n), compare length
class Solution {
public:
    bool wordPattern(string pattern, string str) {
        unordered_map<char, int> m1;
        unordered_map<string, int> m2;
        int i(0), n(pattern.size());
        string word;
        istringstream iss(str);
        while(iss >> word) {
            if(i == n || m1[pattern[i]] != m2[word]) return false;
            m1[pattern[i]] = i + 1;
            m2[word] = i + 1;
            i++;
        }
        return i == n;        
    }
};
