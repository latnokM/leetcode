Given a string s , find the length of the longest substring t  that contains at most 2 distinct characters.

Example 1:

Input: "eceba"
Output: 3
Explanation: t is "ece" which its length is 3.
Example 2:

Input: "ccaabbb"
Output: 5
Explanation: t is "aabbb" which its length is 5.

//O(n), O(1)
class Solution {
public:
    int lengthOfLongestSubstringTwoDistinct(string s) {
        //sliding window, use hash table to store index of last occurrence of letter
        //when have more than 2 entry in table, move left to find the first stored index
        unordered_map<char, int> map;
        int res = 0, left = 0;
        for (int i = 0; i < s.size(); ++i) {
            map[s[i]] = i;
            while (map.size() > 2) {
                //need to move left
                if (left == map[s[left]]) map.erase(s[left]);
                left++;
            }
            res = max(res, i - left + 1);
        }
        return res;
    }
};
