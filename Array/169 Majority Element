Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //boyer-moore voting algo, time O(n) space O(1)
        // only works when majority exists
        int majority = nums[0], count = 1;
        for(int i = 1; i < nums.size(); ++i) {
            if(count == 0) {
                majority = nums[i];
                count++;
            }
            else if(nums[i] == majority)
                count++;
            else
                count--;
        }
        
        return majority;
    }
};

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        //hash table, time O(n), space O(n)
        unordered_map<int, int> count;
        int majorityCount = nums.size() / 2;
        
        for(int num : nums) {
            if(++count[num] > majorityCount)
                return num;            
        }
        
        return 0;
    }
};

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // sort, time O(nlogn) space O(1)
        std::sort(nums.begin(), nums.end());
        return nums[nums.size() / 2];
    }
};
