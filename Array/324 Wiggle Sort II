Given an unsorted array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

Example 1:

Input: nums = [1, 5, 1, 1, 6, 4]
Output: One possible answer is [1, 4, 1, 5, 1, 6].
Example 2:

Input: nums = [1, 3, 2, 2, 3, 1]
Output: One possible answer is [2, 3, 1, 3, 1, 2].
Note:
You may assume all input has valid answer.

Follow Up:
Can you do it in O(n) time and/or in-place with O(1) extra space?

//time O(n), space O(n)
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        // find the median
        int n(nums.size());
        auto midptr = nums.begin() + n / 2;
        // avg O(n)
        nth_element(nums.begin(), midptr, nums.end());
        int media(*midptr);
        
        // three way partition to make sure median numbers are together, O(n)
        int i(0), j(0), k(n - 1);
        while(j <= k) {
            if(nums[j] < media)
                swap(nums[i++], nums[j++]);
            else if(nums[j] > media)
                swap(nums[j], nums[k--]);  //orig k need to be checked so j keep same here
            else
                j++; 
        }
        
        // now we have ascending order array with S, M, L numbers
        int even_start = (n - 1) / 2;
        int odd_start = n - 1;
        //O(n)
        vector<int> copy(n);
        for(int i = 0; i < n; i += 2)
            copy[i] = nums[even_start--];
        for(int i = 1; i < n; i += 2)
            copy[i] = nums[odd_start--];
        
        nums = copy;      
    }
};


//time O(n) space O(1), index mapping
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        // find the median
        int n(nums.size());
        auto midptr = nums.begin() + n / 2;
        // avg O(n)
        nth_element(nums.begin(), midptr, nums.end());
        int median(*midptr);
        
        // index mapping, A[] is the virtual order we partition on, once partition done, 
        // it will convert to wiggle order in nums[], so we are actually partitioning underlying nums[]
        #define A(i) nums[(1 + 2 * i) % (n | 1)]
        
        //three way partition
        int i(0), j(0), k(n - 1);
        while(j <= k) {
            if(A(j) > median)
                swap(A(i++), A(j++));
            else if(A(j) < median)
                swap(A(j), A(k--));
            else
                j++;
        }
    }
};
