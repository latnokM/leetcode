Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. 
You can only see the k numbers in the window. Each time the sliding window moves right by one position. Return the max sliding window.

Example:

Input: nums = [1,3,-1,-3,5,3,6,7], and k = 3
Output: [3,3,5,5,6,7] 
Explanation: 

Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Note: 
You may assume k is always valid, 1 ≤ k ≤ input array's size for non-empty array.

Follow up:
Could you solve it in linear time?

//O(n)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //use deque store index of potential max
        vector<int> res;
        deque<int> q;
        for (int i = 0; i < nums.size(); ++i) {
            //remove previous number if it's smaller than current one, 
            //because as window moving to right, no way the previous small number will be the max
            //check if front num in queue is out of window
            if (!q.empty() && q.front() == i - k) q.pop_front();
            while (!q.empty() && nums[i] >= nums[q.back()])
                q.pop_back();
            q.push_back(i);
            if (i >= k -1)
                res.push_back(nums[q.front()]);
        }
        return res;
    }
};

//multiset, add element is O(lgk), so total time O(nlgk)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //use multiset, since it's ordered, max it the last num in set
        vector<int> res;
        multiset<int> ms;
        for (int i = 0; i < nums.size(); ++i) {
            //remove the front num out of window
            if (i >= k) ms.erase(ms.find(nums[i - k]));
            ms.insert(nums[i]);
            if (i >= k - 1) res.push_back(*ms.rbegin());
        }
        return res;
    }
};

//max heap, O(nlgk)
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        //use max heap store num and index
        vector<int> res;
        priority_queue<pair<int, int>> pq;
        for (int i = 0; i < nums.size(); ++i) {
            while (!pq.empty() && pq.top().second <= i - k) pq.pop();
            pq.push({nums[i], i});
            if (i >= k - 1) res.push_back(pq.top().first);
        }
        return res;
    }
};
