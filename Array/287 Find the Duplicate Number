Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Example 1:

Input: [1,3,4,2,2]
Output: 2
Example 2:

Input: [3,1,3,4,2]
Output: 3
Note:

You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.

//sort, O(nlogn)/O(1)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        std::sort(nums.begin(), nums.end());
        for(int i = 1; i < nums.size(); ++i) {
            if(nums[i] == nums[i - 1]) 
                return nums[i];
        }
        return -1;
    }
};

//set, O(n)/O(n)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        unordered_set<int> set;
        for(int num : nums) {
            if(set.find(num) != set.end())
                return num;
            set.emplace(num);
        }
        return -1;
    }
};

//cycle detection, O(n)/O(1)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        //floyd cycle detection, two pointers
        int slow(nums[0]), fast(nums[0]);
        //n+1 nums, index [0,n], each int point to a valid index except index 0
        //if cycle exist, there must be two nums point to same index, which is the duplicate
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while(slow != fast);
            
        //find entry point of cycle
        fast = nums[0];
        while(slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;   
    }
};
