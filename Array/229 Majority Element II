Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Note: The algorithm should run in linear time and in O(1) space.

Example 1:

Input: [3,2,3]
Output: [3]
Example 2:

Input: [1,1,1,3,3,2,2,2]
Output: [1,2]

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {        
        //at most two candidates, boyer moore voting algo
        int candidateA = 0, candidateB = 0, cntA = 0, cntB = 0;
        vector<int> res;
        
        // find two potential candidates
        for(int num : nums) {
            //in such order make sure B is not same as A 
            if(num == candidateA)
                cntA++;  
            else if(num == candidateB)
                cntB++;
            else if(cntA == 0) {
                candidateA = num;
                cntA++;
            }
            else if(cntB == 0) {
                candidateB = num;
                cntB++;
            }
            else {
                cntA--;
                cntB--;
            }
        }
        
        // check if candidates are valid
        cntA = cntB = 0;

        for(int num : nums) {
            if(num == candidateA)
                cntA++;
            else if(num == candidateB)
                cntB++;
        }
        
        if(cntA > nums.size() / 3)
            res.push_back(candidateA);
        if(cntB > nums.size() / 3)
            res.push_back(candidateB);
        return res;
    }
};
     
 
