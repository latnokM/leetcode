Given an array nums of n integers where n > 1,  return an array output such that output[i] is equal to the product of 
all the elements of nums except nums[i].

Example:

Input:  [1,2,3,4]
Output: [24,12,8,6]
Note: Please solve it without division and in O(n).

Follow up:
Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space 
complexity analysis.)


/O(n), space O(n)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        //use array to store product of left elements and right elements
        int n(nums.size());
        vector<int> pl(n, 1), pr(n, 1), res(n);
        for(int i = 1; i < n; ++i) {
            pl[i] = pl[i - 1] * nums[i - 1];
            pr[n - 1 - i] = pr[n - i] * nums[n - i]; 
        }
            
        for(int i = 0; i < n; ++i)
            res[i] = pl[i] * pr[i];
        return res; 
    }
};

// O(n), O(1)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        //user two int to track left and right product
        int pl(1), pr(1), n(nums.size());
        vector<int> res(n, 1);
        
        for(int i = 0; i < n; ++i) {
            res[i] *= pl;
            pl *= nums[i];
            res[n - 1 - i] *= pr;
            pr *= nums[n - 1 - i];
        }
        return res;
    }
};
