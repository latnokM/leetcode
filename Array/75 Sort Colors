Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, 
with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.

Example:

Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Follow up:

A rather straight forward solution is a two-pass algorithm using counting sort.
First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.
Could you come up with a one-pass algorithm using only constant space?

// counting sort, two pass
class Solution {
public:
    void sortColors(vector<int>& nums) {
        int red(0), white(0), blue(0);
        for(int num : nums) {
            if(num == 0) red++;
            else if(num == 1) white++;
            else blue++;
        }
        int i(0);
        while(red--) nums[i++] = 0;
        while(white--) nums[i++] = 1;
        while(blue--) nums[i++] = 2;        
    }
};

// //one pass, use low and high track edge between three colors
class Solution {
public:
    void sortColors(vector<int>& nums) {   
        int low(0), high(nums.size() - 1), cur(0);
        while(cur <= high) {
            //if cur is 0, swap to low, cur++ as we know low was 1
            if(nums[cur] == 0) swap(nums[low++], nums[cur++]);
            //if cur is 2, swap to high, cur keep same as we don't know what was high
            else if(nums[cur] == 2) swap(nums[high--], nums[cur]);
            //cur is 1, cur++
            else cur++;
        }
    }
};
