Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
             engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

// DP, O(n)/O(1)
//in general, for k transactinos, on i-th day, the total max profit is
// dp[k, i] = max(dp[k, i-1], prices[i] - prices[j] + dp[k-1, j-1]), j=[0..i-1], bought on j-th day 

// four states buy1, sell1, buy2, sell2, keep track of max money for each states. sell min should be 0 meaning no trade
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //greedy(DP), O(n), track max money for each states buy1,sell1,buy2,sell2
        int buy1 = INT_MIN, buy2 = INT_MIN, sell1 = 0, sell2 = 0;
        for(int price : prices) {
            buy1 = std::max(buy1, -price);
            sell1 = std::max(sell1, buy1 + price);
            buy2 = std::max(buy2, sell1 - price);
            sell2 = std::max(sell2, buy2 + price);
        }
        return sell2;
    }
};

