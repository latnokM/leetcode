Given an array of citations (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

Example:

Input: citations = [3,0,6,1,5]
Output: 3 
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had 
             received 3, 0, 6, 1, 5 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.
Note: If there are several possible values for h, the maximum one is taken as the h-index.

If we have the function f ordered in decreasing order from the largest value to the lowest one, we can compute the h index as follows:
h-index(f) = max(min(f(i), i))

//comparison sort, time O(nlogn), space O(1)
class Solution {
public:
    int hIndex(vector<int>& citations) {
        // comparison sort citations in descending order, find largest i that citations[i] > i
        std::sort(citations.begin(), citations.end(), std::greater<int>());
        
        int i = 0;
        while(i < citations.size() && citations[i] > i)
            i++;
        
        return i;  //index i + 1
    }
};

/counting sort, time O(n), space O(n)
class Solution {
public:
    int hIndex(vector<int>& citations) {  
        int n = citations.size();
        int count[n + 1] = {0};
        //cut off citations to # of papers, count # of papers for each citation number
        //citations={1,3,2,3,100} -> count={0, 1, 1, 2, 0, 1} -> sum={5, 5, 4, 3, 1, 1} 
        // sum[i] papers all have at least i citations 
        for(int c : citations) {
            count[std::min(c, n)]++;
        }
        
        //find largest i that sum >= i
        int h = n;
        int sum = count[n];
        while(h > sum) {
            h--;
            sum += count[h];
        }      
        return h;
    }
};
