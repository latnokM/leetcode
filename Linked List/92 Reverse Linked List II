Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL

//O(n) one pass
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        //First locate the node before the m-th node (pre) and the m-th node (cur). Then move cur -> next to be after pre for n - m times.
        ListNode dummy(0);
        ListNode *prev = &dummy, *cur;
        prev->next = head;
        
        for (int i = 0; i < m - 1; ++i) prev = prev->next;
        
        cur = prev->next;
        for (int i = 0; i < n - m; ++i) {
           ListNode* temp = prev -> next;
           prev -> next = cur -> next;
           cur -> next = cur -> next -> next;
           prev -> next -> next = temp;
        }
        return dummy.next;  
    }
};
