Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.
Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

//O(n)
class Solution {
public:
    void reorderList(ListNode* head) {
        //find middle node
        ListNode *p1 = head, *p2 = head;
        while (p2 && p2->next) {
            p1 = p1->next;
            p2 = p2->next->next;
        }
    
        //reverse second half
        ListNode *prev = NULL, *next = NULL;
        while (p1) {
            next = p1->next;
            p1->next = prev;
            prev = p1;
            p1 = next;
        }
        
        p2 = prev;
        p1 = head;
        
        //merge two list
        while (p1) {
            ListNode *tmp = p1->next;
            p1->next = p2;
            p1 = p2;
            p2 = tmp;
        }
    }
};
