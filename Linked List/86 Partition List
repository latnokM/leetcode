Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example:

Input: head = 1->4->3->2->5->2, x = 3
Output: 1->2->2->4->3->5

//two pointer, O(n)
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode l1(0), l2(0);
        ListNode *prev1 = &l1, *prev2 = &l2, *cur = head;
        while (cur) {
            if (cur->val < x) {
                prev1->next = cur;
                prev1 = cur;
            } else {
                prev2->next = cur;
                prev2 = cur;
            }
            cur = cur->next;
        }
        prev1->next = l2.next;
        prev2->next = NULL;
        return l1.next;
    }
};
