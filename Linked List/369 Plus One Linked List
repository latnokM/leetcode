Given a non-negative integer represented as non-empty a singly linked list of digits, plus one to the integer.

You may assume the integer do not contain any leading zero, except the number 0 itself.

The digits are stored such that the most significant digit is at the head of the list.

Example :

Input: [1,2,3]
Output: [1,2,4]

//recursive
class Solution {
public:
    ListNode* plusOne(ListNode* head) {
        //recursive
        if (addOne(head) == 0) {
            return head;
        } else {
            //add new node for carry
            ListNode *newHead = new ListNode(1);
            newHead->next = head;
            return newHead;
        }
    }
private:
    int addOne(ListNode* head) {
        if (!head) return 1;
        
        int carry = addOne(head->next);
        
        if (carry == 0) return 0; 
            
        int sum = head->val + 1;
        head->val = sum % 10;
        return sum / 10;
    }
};

//iterative, two pointer
class Solution {
public:
    ListNode* plusOne(ListNode* head) {
        //i is the last non-9 node
        ListNode *dummy = new ListNode(0);
        ListNode *i = dummy, *cur = head;
        dummy->next = head;
        while (cur) {
            if (cur->val != 9) i = cur;
            cur = cur->next;
        }
        
        i->val++;
        //update node after i to 0
        i = i->next;
        while (i) {
            i->val = 0;
            i = i->next;
        }
        if (dummy->val == 1) return dummy;
        return head;
    }
};
