Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a 
multiple of k then left-out nodes in the end should remain as it is.

Example:

Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

Note:

Only constant extra memory is allowed.
You may not alter the values in the list's nodes, only nodes itself may be changed.

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        //get size of list
        ListNode *cur = head;
        int size = 0;
        while (cur) {
            size++;
            cur = cur->next;
        }
        
        if (size < k) return head;
        
        ListNode dummy(0);
        dummy.next = head;
        ListNode *prev = &dummy, *next;
        while (size >= k) {
            cur = prev->next;
            next = cur->next;
            for (int i = 1; i < k; ++i) {
                cur->next = next->next;
                next->next = prev->next;
                prev->next = next;
                next = cur->next;
            }
            prev = cur;
            size -= k;
        }
        return dummy.next;
    }
};
