Write a program to find the node at which the intersection of two singly linked lists begins.

Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). 
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,0,1,8,4,5]. There are 2 nodes before the 
intersected node in A; There are 3 nodes before the intersected node in B.

//unordered_set, O(m + n)/O(m)
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //unordered_set
        unordered_set<ListNode*> set;
        while (headA) {
            set.insert(headA);
            headA = headA->next;
        }
        
        while (headB) {
            if (set.find(headB) != set.end())
                return headB;
            headB = headB->next;
        }
        return NULL;
    }
};

//two pointer O(m + n)/O(1)
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //two pointer
        if (!headA || !headB) return NULL;
        
        ListNode *pA = headA, *pB = headB;
        while (pA != pB) {
            //if no intersection, pA and pB will meet at tail as NULL
            pA = pA ? pA->next : headB;
            pB = pB ? pB->next : headA;
        }
        return pA;        
    }
};
