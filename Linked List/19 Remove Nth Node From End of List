Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?

//O(n) one pass
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        //two pointers
        ListNode dummy(0);
        ListNode *prev = &dummy, *tail = head;
        dummy.next = head;
        
        while (n--) tail = tail->next;
        
        while (tail) {
            prev = prev->next;
            tail = tail->next;
        }
        
        //delete prev->next
        prev->next = prev->next->next;
        return dummy.next;
    }
};
