Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL
rotate 3 steps to the right: 0->1->2->NULL
rotate 4 steps to the right: 2->0->1->NULL

//O(n)
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (!head || !head->next) return head;
        
        ListNode *tail = head, *newHead;
        int size = 1;
        //get number of nodes
        while (tail->next) {
            size++;
            tail = tail->next;
        }
        //circle the list to a loop
        tail->next = head;
        
        //find the location of newHead, if k > size, k = k % size
        if (k %= size) {
            for (int i = 0; i < size - k; ++i)
                tail = tail->next;
        }
        
        newHead = tail->next;
        tail->next = NULL;
        return newHead;     
    }
};
