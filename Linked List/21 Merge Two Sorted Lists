Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the 
first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4

//O(m+n), space O(m+n)
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        //recursive
        if (!l1) {
            return l2;
        } else if (!l2) {
            return l1;
        } else if (l1->val < l2->val) {
            l1->next = mergeTwoLists(l1->next, l2);
            return l1;
        } else {
            l2->next = mergeTwoLists(l1, l2->next);
            return l2;
        }
    }
};


//iterative, O(m+n), O(1)
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);
        ListNode *prev = &dummy;
        while (l1 && l2) {
            if (l1->val < l2->val) {
                prev->next = l1;
                l1 = l1->next;
            } else {
                prev->next = l2;
                l2 = l2->next;
            }
            prev = prev->next;
        }
        
        prev->next = l1 ? l1 : l2;
        return dummy.next;        
    }
};
