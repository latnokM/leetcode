Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

//merge sort, top-down, O(nlgn) space(lgn)
class Solution {
public:
    ListNode* sortList(ListNode* head) {    
        if (!head || !head->next) return head;        
        
        //cut list in half
        ListNode *prev = NULL, *slow = head, *fast = head;
        while (fast && fast->next) {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        
        prev->next = NULL;
        
        //sort two half list
        ListNode* left = sortList(head);
        ListNode* right = sortList(slow);
        
        return merge(left, right);
    }
    
private:
    ListNode* merge(ListNode* l1, ListNode* l2) {
        if (!l1) return l2;
        if (!l2) return l1;
        
        ListNode dummy(0);
        ListNode *p = &dummy;
        while (l1 && l2) {
            if (l1->val < l2->val) {
                p->next = l1;
                l1 = l1->next;
            } else {
                p->next = l2;
                l2 = l2->next;
            }
            p = p->next;
        }
        
        p->next = l1 ? l1 : l2;
        return dummy.next;
    }    
};

//merge sort interative, bottom-up, space O(1)
class Solution {
public:
    ListNode* sortList(ListNode* head) { 
        if (!head || !head->next) return head;
        
        //get size of list
        int size = 0;
        ListNode *cur = head;
        while (cur) {
            size++;
            cur = cur->next;
        }
        
        ListNode dummy(0);
        dummy.next = head;
        ListNode *left, *right, *prev;
        for (int step = 1; step < size; step <<= 1) {
            cur = dummy.next;
            prev = &dummy;
            while (cur) {
                left = cur;
                right = split(left, step);
                cur = split(right, step);
                prev = merge(left, right, prev);
            }
        }
        return dummy.next;
    }
    
private:
    //divide list into two lists, first list contains first n nodes, return head of second list
    ListNode *split(ListNode *head, int n) {
        for (int i = 1; head && i < n; ++i) head = head->next;
        
        if (!head) return NULL;
        ListNode *second = head->next;
        head->next = NULL;
        return second;
    }
    
    //merge two sorted list l1 and l2, then append merged sorted list to node head, return tail of merged list
    ListNode *merge(ListNode *l1, ListNode *l2, ListNode *head) {
        ListNode *cur = head;
        while (l1 && l2) {
            if (l1->val < l2->val) {
                cur->next = l1;
                l1 = l1->next;
            } else {
                cur->next = l2;
                l2 = l2->next;
            }
            cur = cur->next;
        }
        cur->next = l1 ? l1 : l2;
        while (cur->next) cur = cur->next;
        return cur;
    }
};
