One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. 
If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. 
Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:

Input: "9,3,4,#,#,1,#,#,2,#,6,#,#"
Output: true
Example 2:

//O(n), O(1)
class Solution {
public:
    bool isValidSerialization(string preorder) {
        //track available spot while adding node, add every node reduce spot by 1, add non-null node
        //also increase 2 spots
        if (preorder.empty()) return true;
        preorder += ",";
        int spot = 1;
        
        for (int i = 0; i < preorder.size(); ++i) {
            if (preorder[i] != ',') continue;
            //use one spot for every node, do we have spot?
            spot--; 
            if (spot < 0) return false;
            //non-null node add two spots
            if (preorder[i - 1] != '#') spot += 2;
        }
        return spot == 0;        
    }
};
