Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example 1:

Given the following tree [3,9,20,null,null,15,7]:

    3
   / \
  9  20
    /  \
   15   7
Return true.

//DFS O(n)
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return height(root) != -1;        
    }
    
    int height(TreeNode *node) {
        if (!node) return 0;
        
        int leftHeight = height(node->left);
        if (leftHeight == -1) return -1;
        int rightHeight = height(node->right);
        if (rightHeight == -1) return -1;
        
        if (abs(leftHeight - rightHeight) > 1) return -1;
        return 1 + max(leftHeight, rightHeight);
    }
};
