Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path 
equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

//recursive O(n)
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (!root) return false;
        
        sum -= root->val;
        if (!root->left && !root->right)
            return sum == 0;
        return hasPathSum(root->left, sum) || hasPathSum(root->right, sum);        
    }
};

//iterative, O(n)
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (!root) return false;
        
        typedef pair<TreeNode*, int> nodeSum;
        stack<nodeSum> s;
        s.push(nodeSum(root, sum - root->val));
        while (!s.empty()) {
            TreeNode *cur = s.top().first;
            int curSum = s.top().second;
            s.pop();
            if (!cur->left && !cur->right && curSum == 0) return true;
            if (cur->right) s.push(nodeSum(cur->right, curSum - cur->right->val));
            if (cur->left) s.push(nodeSum(cur->left, curSum - cur->left->val));
        }   
        return false;
    }
};
