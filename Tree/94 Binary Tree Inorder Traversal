Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]
Follow up: Recursive solution is trivial, could you do it iteratively?


//recursive, O(n)/O(lgn)
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        //recursive
        vector<int> res;
        inorder(root, res);
        return res;
    }
    
private:
    void inorder(TreeNode* node, vector<int>& res) {
        if (!node) return;
        inorder(node->left, res);
        res.push_back(node->val);
        inorder(node->right, res);
    }
};


//stack based iterative O(n)/O(n)
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        //stack based iterative
        vector<int> res;
        stack<TreeNode*> stack;
        TreeNode *cur = root;
        while (cur || !stack.empty()) {
            while (cur) {
                stack.push(cur);
                cur = cur->left;
            }
            
            cur = stack.top();
            stack.pop();
            res.push_back(cur->val);
            cur = cur->right;
        }
        return res;
    }
};

//morris traversal, O(n)/O(1)
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        //morris traversal
        if (!root) return {};
        
        vector<int> res;
        TreeNode *cur = root, *pre = NULL;
        while (cur) {
            if (!cur->left) {
                //no left subtree, visit cur and go to right child
                res.push_back(cur->val);
                cur = cur->right;
            } else {
                //find inorder predecessor of cur in left subtree
                pre = cur->left;
                while (pre->right && pre->right != cur)
                    pre = pre->right;
                
                if (!pre->right) {
                    //link pre to cur and go to cur->left
                    pre->right = cur;
                    cur = cur->left;
                } else {
                    //done visiting left subtree, now visit cur and go to cur->right
                    res.push_back(cur->val);
                    pre->right = NULL;
                    cur = cur->right;
                }
            }
        }
        return res;
    }
};
