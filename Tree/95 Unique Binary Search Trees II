Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n < 1) return {};
        return helper(1, n);
    }
    
    vector<TreeNode*> helper(int start, int end) {
        vector<TreeNode*> res, left, right;
        if (start > end) return {nullptr};
        
        for (int i = start; i <= end; ++i) {
            left = helper(start, i - 1);
            right = helper(i + 1, end);
            
            for (auto ltree : left) {
                for (auto rtree: right) {
                    TreeNode *root = new TreeNode(i);
                    root->left = ltree;
                    root->right = rtree;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
};
