Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]

//BFS + hash table, O(n), O(n)
class Solution {
public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
        //BFS, track col for each node, root's col is 0
        if (root == nullptr) return {};
        
        vector<vector<int>> res;
        //track min and max col value
        int minCol = 0, maxCol = 0;
        //map to store list of node for each col
        unordered_map<int, vector<int>> map;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        while (!q.empty()) {
            TreeNode *cur = q.front().first;
            int col = q.front().second;
            q.pop();
            
            //add cur node to map
            if (map.find(col) == map.end())
                map[col] = vector<int>{cur->val};
            else
                map[col].push_back(cur->val);
            
            if (cur->left) {
                q.push({cur->left, col - 1});
                minCol = min(minCol, col - 1); 
            }                 
            if (cur->right) {
                q.push({cur->right, col + 1});
                maxCol = max(maxCol, col + 1);
            }
        }
        for (int i = minCol; i <= maxCol; ++i)
            res.push_back(map[i]);
        return res;
    }
};
