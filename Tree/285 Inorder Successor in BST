Given a binary search tree and a node in it, find the in-order successor of that node in the BST.

The successor of a node p is the node with the smallest key greater than p.val.

Example 1:

Input: root = [2,1,3], p = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.

//O(h)
class Solution {
public:
    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {
        //either smallest node in right subtree or lowest ancestor on right
        if (root == nullptr || p == nullptr) return nullptr;
        
        TreeNode *successor = nullptr;
        while (root) {
            if (root->val <= p->val) {
                root = root->right;
            } else {
                successor = root;
                root = root->left;
            }
        }
        return successor;        
    }
};

//find inorder predecessor in BST
class Solution {
public:
    TreeNode* inorderPredecessor(TreeNode* root, TreeNode* p) {
        //either biggest node in left subtree or lowest ancestor on left
        if (root == nullptr || p == nullptr) return nullptr;
        
        TreeNode *predecessor = nullptr;
        while (root) {
            if (root->val >= p->val) {
                root = root->left;
            } else {
                predecessor = root;
                root = root->right;
            }
        }
        return successor;        
    }
};
