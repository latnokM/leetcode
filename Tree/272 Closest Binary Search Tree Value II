Given a non-empty binary search tree and a target value, find k values in the BST that are closest to the target.

Note:

Given target value is a floating point.
You may assume k is always valid, that is: k â‰¤ total nodes.
You are guaranteed to have only one unique set of k values in the BST that are closest to the target.
Example:

Input: root = [4,2,5,1,3], target = 3.714286, and k = 2

    4
   / \
  2   5
 / \
1   3

Output: [4,3]
Follow up:
Assume that the BST is balanced, could you solve it in less than O(n) runtime (where n = total nodes)?

//inorder travesal, slide window of size k, O(n), O(k+h)
class Solution {
public:
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        // inorder travesal, keep a size k window in queue
        deque<int> q;
        stack<TreeNode*> s;
        TreeNode *cur = root;
        while (cur || !s.empty()) {
            while (cur) {
                s.push(cur);
                cur = cur->left;
            }
            cur = s.top();
            s.pop();
            if (q.size() == k) {
                if (abs(target - q.front()) < abs(target - cur->val))
                    //found smallest k val
                    break;
                else
                    q.pop_front();
            }
            q.push_back(cur->val);
            cur = cur->right;
        }
        
        return vector<int>(q.begin(), q.end());        
    }
};


//Building each of the stacks takes O(log(n)) assuming BST is balanced.
//Each call to getNextPred/Succ has an amortized cost of O(1), since every node is pushed and popped at most once.
//time O(lgn + k), space(lgn + k)
class Solution {
public:
    vector<int> closestKValues(TreeNode* root, double target, int k) {
        //use two stacks to track predecessors and successors
        stack<TreeNode*> pred;
        stack<TreeNode*> succ;
        buildPred(pred, root, target);
        buildSucc(succ, root, target);
        //in case there is val == target
        if (!pred.empty() && !succ.empty() && pred.top() == succ.top()) getNextPred(pred);
        
        vector<int> res;
        for (int i = 0; i < k; ++i) {
            if (pred.empty()) {
                res.push_back(getNextSucc(succ));
            } else if (succ.empty()) {
                res.push_back(getNextPred(pred));
            } else {
                if (abs(target - pred.top()->val) < abs(target - succ.top()->val))
                    res.push_back(getNextPred(pred));
                else 
                    res.push_back(getNextSucc(succ));
            }
        }
        return res;        
    }
    
    void buildPred(stack<TreeNode*>& pred, TreeNode* root, double target) {
        while (root) {
            if (root->val == target) {
                pred.push(root);
                break;
            } else if (root->val > target) {
                root = root->left;
            } else {
                pred.push(root);
                root = root->right;
            }
        }
    }
    
    void buildSucc(stack<TreeNode*>& succ, TreeNode* root, double target) {
        while (root) {
            if (root->val == target) {
                succ.push(root);
                break;
            } else if (root->val > target) {
                succ.push(root);
                root = root->left;
            } else {
                root = root->right;
            }
        }
    }
    
    int getNextPred(stack<TreeNode*>& pred) {
        //amotized O(1)
        TreeNode* cur = pred.top();
        pred.pop();
        int ret = cur->val;
        cur = cur->left;
        while (cur) {
            pred.push(cur);
            cur = cur->right;
        }
        return ret;
    }
    
    int getNextSucc(stack<TreeNode*>& succ) {
        TreeNode *cur = succ.top();
        succ.pop();
        int ret = cur->val;
        cur = cur->right;
        while (cur) {
            succ.push(cur);
            cur = cur->left;
        }
        return ret;
    }
};
