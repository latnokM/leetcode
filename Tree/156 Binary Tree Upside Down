Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) 
or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.

Example:

Input: [1,2,3,4,5]

    1
   / \
  2   3
 / \
4   5

Output: return the root of the binary tree [4,5,2,#,#,3,1]

   4
  / \
 5   2
    / \
   3   1  

//O(h) 
//recursive change connection from bottom to top
//need to change two child of cur and two child of cur->left for each node
class Solution {
public:
    TreeNode* upsideDownBinaryTree(TreeNode* root) {
        
        if (root == nullptr || root->left == nullptr) return root;
        TreeNode *newRoot = upsideDownBinaryTree(root->left);
        root->left->left = root->right;
        root->left->right = root;
        root->left = nullptr;
        root->right = nullptr;
        return newRoot;    
    }
};
