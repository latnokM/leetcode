Given a binary tree, collect a tree's nodes as if you were doing this: Collect and remove all leaves, repeat until the tree is empty.

 

Example:

Input: [1,2,3,4,5]
  
          1
         / \
        2   3
       / \     
      4   5    

Output: [[4,5,3],[2],[1]]

class Solution {
public:
    vector<vector<int>> findLeaves(TreeNode* root) {
        vector<vector<int>> res;
        getHeight(root, res);
        return res;
    }
    
    //height of node is the distance to its deepest leaf
    int getHeight(TreeNode *node, vector<vector<int>>& res) {
        if (!node) return -1;
        int height = 1 + max(getHeight(node->left, res), getHeight(node->right, res));
        if (res.size() < height + 1) res.push_back(vector<int>{});
        res[height].push_back(node->val);
        return height;
    }
};
