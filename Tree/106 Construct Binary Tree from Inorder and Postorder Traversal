Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

inorder = [9,3,15,20,7]
postorder = [9,15,7,20,3]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
  
//O(n), O(n)
class Solution {
public:
    unordered_map<int, int> map;
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        for (int i = 0; i < inorder.size(); ++i)
            map[inorder[i]] = i;
        int postIdx = postorder.size() - 1;
        return helper(0, inorder.size() - 1, postorder, postIdx);
    }
    
    TreeNode* helper(int inStart, int inEnd, vector<int>& postorder, int& postIdx) {
        if (inStart > inEnd) return nullptr;
        
        int rootVal = postorder[postIdx];
        int inIdx = map[rootVal];
        TreeNode *root = new TreeNode(rootVal);
        
        postIdx--;
        root->right = helper(inIdx + 1, inEnd, postorder, postIdx);
        root->left = helper(inStart, inIdx - 1, postorder, postIdx);
        return root;
    }
};
