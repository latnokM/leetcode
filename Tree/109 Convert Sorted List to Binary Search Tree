Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every 
node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 
//two pointer + recursive binary search O(nlgn), O(lgn)
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        return sortedListToBST(head, nullptr);        
    }
    
    TreeNode* sortedListToBST(ListNode* head, ListNode* tail) {
        if (head == tail) return nullptr;
        if (head->next == tail) return new TreeNode(head->val);
        
        //find mid node, split list into two halves
        ListNode *fast = head, *slow = head;
        while (fast != tail && fast->next != tail) {
            slow = slow->next;
            fast = fast->next->next;
        } 
        
        TreeNode *root = new TreeNode(slow->val);
        root->left = sortedListToBST(head, slow);
        root->right = sortedListToBST(slow->next, tail);
        return root;
    }
};

//convert linked list to array, construct BST from sorted array, O(n)/O(n)
skip

//inorder simulation O(n)/O(lgn)
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        int n = findSize(head);
        return sortedListToBST(&head, 0, n - 1);
    }
    
    int findSize(ListNode* head) {
        int size = 0;
        while (head) {
            head = head->next;
            size++;
        }
        return size;
    }
    
    TreeNode* sortedListToBST(ListNode** head, int l, int r) {
        if (l > r) return nullptr;
        
        int mid = (l + r) / 2;
        //construct left subtree
        TreeNode *left = sortedListToBST(head, l, mid - 1);
        
        //create root and link to left
        TreeNode *root = new TreeNode((*head)->val);
        root->left = left;
        
        *head = (*head)->next;
        
        //construct right subtree
        root->right = sortedListToBST(head, mid + 1, r);
        return root;
    }
};
