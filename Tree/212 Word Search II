Given a 2D board and a list of words from the dictionary, find all words in the board.

Each word must be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or 
vertically neighboring. The same letter cell may not be used more than once in a word.

Example:

Input: 
board = [
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]
words = ["oath","pea","eat","rain"]

Output: ["eat","oath"]
 

Note:

All inputs are consist of lowercase letters a-z.
The values of words are distinct.

class Solution {
public:
    
    class TrieNode {
    public:
        TrieNode *child[26];
        string word;
        TrieNode() : word() {
            for (auto &a : child)
                a = nullptr;
        }
    };
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        TrieNode *root = buildTrie(words);
        for (int i = 0; i < board.size(); ++i) {
            for (int j = 0; j < board[0].size(); ++j)
                dfs(board, i, j, root, res);
        }
        return res;
    }
    
    void dfs(vector<vector<char>>& board, int i, int j, TrieNode* node, vector<string>& res) {
        char c = board[i][j];
        //return if visited or c is not in trie
        if (c == '#' || node->child[c - 'a'] == nullptr) return;
        node = node->child[c - 'a'];
        if (!node->word.empty()) {
            //found a word
            res.push_back(node->word);
            //clear to avoid duplicate
            node->word.clear();
        }
        //to avoid revisit the node in current iteration, reset for next main iteration
        board[i][j] = '#';
        if (i > 0) dfs(board, i - 1, j, node, res);
        if (j > 0) dfs(board, i, j - 1, node, res);
        if (i < board.size() - 1) dfs(board, i + 1, j, node, res);
        if (j < board[0].size() - 1) dfs(board, i, j + 1, node, res);
        board[i][j] = c;
    }
    
    TrieNode* buildTrie(vector<string>& words) {
        TrieNode *root = new TrieNode();
        for (auto &w : words) {
            TrieNode *cur = root;
            for (auto &c : w) {
                int i = c - 'a';
                if (cur->child[i] == nullptr)
                    cur->child[i] = new TrieNode();
                cur = cur->child[i];
            }
            cur->word = w;
        }
        return root;
    }
};
