Given a complete binary tree, count the number of nodes.

Note:

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as 
far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

Example:

Input: 
    1
   / \
  2   3
 / \  /
4  5 6

Output: 6

//O(n)
class Solution {
public:
    int countNodes(TreeNode* root) {
        return root == nullptr ? 0 : (1 + countNodes(root->left) + countNodes(root->right));
    }
};

//O(lgn^2), binary search leaf node
class Solution {
public:
    int countNodes(TreeNode* root) {
        //complete binary tree: n = 2^(h + 1) - 1;
        int h = height(root);
        return h < 0 ? 0 : 
               height(root->right) == h - 1 ? (1 << h) + countNodes(root->right)
                                            : (1 << h - 1) + countNodes(root->left);
    }
    
    int height(TreeNode* root) {
        return root == nullptr ? -1 : 1 + height(root->left);
    }
};
