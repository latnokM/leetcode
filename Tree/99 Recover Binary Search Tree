Two elements of a binary search tree (BST) are swapped by mistake.

Recover the tree without changing its structure.

Example 1:

Input: [1,3,null,null,2]

   1
  /
 3
  \
   2

Output: [3,1,null,null,2]

   3
  /
 1
  \
   2
   
Follow up:

A solution using O(n) space is pretty straight forward.
Could you devise a constant space solution?

//O(n), space O(1)
class Solution {
public:
    void recoverTree(TreeNode* root) {
        //morris travesal inorder
        TreeNode *cur = root, *p = nullptr, *pre = nullptr, *first = nullptr, *second = nullptr;
        while (cur) {
            if (cur->left == nullptr) {
                // no left subtree, visit cur and go to right subtree
                if (pre && pre->val > cur->val) {
                    if (first == nullptr) first = pre;
                    second = cur;
                }
                pre = cur;
                cur = cur->right;
            } else {
                //find inorder predecessor of cur in left subtree
                p = cur->left;
                while (p->right && p->right != cur)
                    p = p->right;
                
                if (p->right == nullptr) {
                    //link p to cur and move cur to cur->left
                    p->right = cur;
                    cur = cur->left;
                } else {
                    //done visiting left subtree, visit cur and go to right subtree
                    if (pre && pre->val > cur->val) {
                        if (first == nullptr) first = pre;
                        second = cur;
                    }
                    pre = cur;
                    p->right = nullptr;
                    cur = cur->right;
                }
            }
        }
        swap(first->val, second->val);
    }
};
