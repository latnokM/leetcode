Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

For example, given

preorder = [3,9,20,15,7]
inorder = [9,3,15,20,7]
Return the following binary tree:

    3
   / \
  9  20
    /  \
   15   7
   
//O(n), O(n)
class Solution {
public:
    unordered_map<int, int> map;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        //map stores node val-> index in inorder
        for (int i = 0; i < inorder.size(); ++i)
            map[inorder[i]] = i;
        
        return helper(preorder, 0, 0, inorder.size() - 1);
    }
    
    TreeNode* helper(vector<int>& preorder, int preIdx, int inStart, int inEnd) {
        if (inStart > inEnd) return nullptr;
        
        int rootVal = preorder[preIdx];
        int inIdx = map[rootVal];
        TreeNode *root = new TreeNode(rootVal);
        
        root->left = helper(preorder, preIdx + 1, inStart, inIdx - 1);
        root->right = helper(preorder, preIdx + inIdx - inStart + 1, inIdx + 1, inEnd);
        return root;
    }
};
