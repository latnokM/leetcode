Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.

You may assume each number in the sequence is unique.

Consider the following binary search tree: 

     5
    / \
   2   6
  / \
 1   3
Example 1:

Input: [5,2,6,1,3]
Output: false
Example 2:

Input: [5,2,1,3,6]
Output: true
Follow up:
Could you do it using only constant space complexity?

//O(n), O(h), stack
class Solution {
public:
    bool verifyPreorder(vector<int>& preorder) {
        int low = INT_MIN;
        stack<int> s;
        for (int p : preorder) {
            if (p < low) return false;
            while (!s.empty() && p > s.top()) {
                //we are in right subtree, pop all left nodes and root, update low to root
                low = s.top();
                s.pop();
            }
            s.push(p);            
        }
        return true;
    }
};

//O(n), O(1)
class Solution {
public:
    bool verifyPreorder(vector<int>& preorder) {
        int low = INT_MIN, i = -1;
        for (int p : preorder) {
            if (p < low) return false;
            while (i >= 0 && p > preorder[i]) {
                low = preorder[i--];
            }
            preorder[++i] = p;
        }
        return true;
    }
};
