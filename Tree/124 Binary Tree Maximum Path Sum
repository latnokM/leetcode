Given a non-empty binary tree, find the maximum path sum.

For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along 
the parent-child connections. The path must contain at least one node and does not need to go through the root.

Example 1:

Input: [1,2,3]

       1
      / \
     2   3

Output: 6
Example 2:

Input: [-10,9,20,null,null,15,7]

   -10
   / \
  9  20
    /  \
   15   7

Output: 42

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN;
        dfsMaxPath(root, maxSum);
        return maxSum;
    }
    
    int dfsMaxPath(TreeNode* node, int& maxSum) {
        if (!node) return 0;
        // max sum on left subtree and right subtree
        int l_max = max(0, dfsMaxPath(node->left, maxSum));
        int r_max = max(0, dfsMaxPath(node->right, maxSum));
        
        // update maxSum if node is the highest in the path
        maxSum = max(maxSum, l_max + r_max + node->val);
        
        // extend the path
        return node->val + max(l_max, r_max);
    }
};
