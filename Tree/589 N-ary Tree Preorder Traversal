Given an n-ary tree, return the preorder traversal of its nodes' values.

Note:

Recursive solution is trivial, could you do it iteratively?

class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> res;
        preorder(root, res);
        return res;        
    }
    
    void preorder(Node* node, vector<int>& res) {
        if (node == nullptr) return;
        res.push_back(node->val);
        for (auto child : node->children)
            preorder(child, res);
    }
};

class Solution {
public:
    vector<int> preorder(Node* root) {
        if (root == nullptr) return {};
        
        vector<int> res;
        stack<Node*> s;
        s.push(root);
        while (!s.empty()) {
            Node *cur = s.top();
            s.pop();
            res.push_back(cur->val);
            for (int i = cur->children.size() - 1; i >= 0; --i)
                s.push(cur->children[i]);
        }
        return res;
    }
};
