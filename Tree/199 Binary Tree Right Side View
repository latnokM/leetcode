Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered 
from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---


//DFS
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        dfs(root, res, 0);
        return res;        
    }
    
    void dfs(TreeNode* node, vector<int>& res, int depth) {
        if (node == NULL) return;
        if (depth == res.size()) res.push_back(node->val);
        dfs(node->right, res, depth + 1);
        dfs(node->left, res, depth + 1);
    }
};

//BFS
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if (root == NULL) return {};
        
        vector<int> res;
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; ++i) {
                TreeNode *cur = q.front();
                q.pop();
                if (i == 0) res.push_back(cur->val);
                if (cur->right) q.push(cur->right);
                if (cur->left) q.push(cur->left);
            }
        }
        return res;
    }
};
