Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. 
A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree 
of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.

//O(m*n)
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if (s == NULL) return false;
        return isSame(s, t) || isSubtree(s->left, t) || isSubtree(s->right, t);
    }
    
    bool isSame(TreeNode* node1, TreeNode* node2) {
        if (node1 == NULL || node2 == NULL) return node1 == node2;
        return (node1->val == node2->val)
               && isSame(node1->left, node2->left)
               && isSame(node1->right, node2->right);
    }
};
