Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, 
level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        helper(root, 0, res);
        reverse(res.begin(), res.end());
        return res;
    }
    
    void helper(TreeNode* node, int level, vector<vector<int>>& res) {
        if (node == NULL) return;
        if (level == res.size())
            res.push_back(vector<int>{});
        res[level].push_back(node->val);
        helper(node->left, level + 1, res);
        helper(node->right, level + 1, res);
    }
};
