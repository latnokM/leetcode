Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? 
Find all unique quadruplets in the array which gives the sum of target.

Note:

The solution set must not contain duplicate quadruplets.

Example:

Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


//O(n^3)
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> res;
        if (n < 4) return res;
        
        sort(nums.begin(), nums.end());
        
        for (int i = 0; i < n - 3; ++i) {
            //skip duplicate
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            //skip the case where nums[i] is too small
            if (nums[i] + nums[n - 3] + nums[n - 2] + nums[n - 1] < target) continue;
            //stop looking if sum is already too big
            if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break;
            
            int target3 = target - nums[i];
            //convert to 3sum problem
            for (int j = i + 1; j < n - 2; ++j) {
                //skip duplicate
                if (j > i + 1 && nums[j] == nums[j - 1]) continue;
                //skip the case where nums[j] is too small
                if (nums[j] + nums[n - 2] + nums[n - 1] < target3) continue;
                //stop looking if sum is already too big
                if (nums[j] + nums[j + 1] + nums[j + 2] > target3) break;
                //convert to 2sum problem
                int target2 = target3 - nums[j];
                int l = j + 1, r = n - 1;
                while (l < r) {
                    int sum = nums[l] + nums[r];
                    if (sum < target2) {
                        l++;
                    } else if (sum > target2) {
                        r--;
                    } else {
                        //found the quadruplet
                        res.push_back({nums[i], nums[j], nums[l], nums[r]});
                        do {r--;} while (l < r && nums[r] == nums[r + 1]);
                        do {l++;} while (l < r && nums[l] == nums[l - 1]);
                    }
                }
            }
        }
        return res;        
    }
};
