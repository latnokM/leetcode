Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent 
number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

Example 1:

Input: "112358"
Output: true 
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
Example 2:

Input: "199100199"
Output: true 
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199
Follow up:
How would you handle overflow for very large input integers?


class Solution {
public:
    bool isAdditiveNumber(string num) {
        //i and j are length of first and second num
        for (int i = 1; i <= num.size() / 2; ++i) {
            for (int j = 1; j <= (num.size() - i) / 2; ++j) {
                if (isValid(num.substr(0, i), num.substr(i, j), num.substr(i + j)))
                    return true;
            }
        }
        return false;
    }
    
private:
    bool isValid(string num1, string num2, string num) {
        //check leading 0
        if ((num1.size() > 1 && num1[0] == '0') || (num2.size() > 1 && num2[0] == '0')) return false;
        
        string sum = addString(num1, num2);
        if (num == sum) return true;
        if (num.size() > sum.size() && sum == num.substr(0, sum.size()))
            return isValid(num2, sum, num.substr(sum.size()));
        else
            return false;
    }
    
    string addString(string num1, string num2) {
        string res;
        int i = num1.size() - 1, j = num2.size() - 1, carry = 0;
        
        while (i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if (i >= 0) sum += num1[i--] - '0';
            if (j >= 0) sum += num2[j--] - '0';
            res += '0' + sum % 10;
            carry = sum / 10;
        }
        reverse(res.begin(), res.end());
        return res;
    }
};
