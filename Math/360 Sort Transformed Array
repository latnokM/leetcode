Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to 
each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example 1:

Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]
Example 2:

Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

1.a>0, two ends in original array are bigger than center if you learned middle school math before.
2.a<0, center is bigger than two ends.
so use two pointers i, j and do a merge-sort like process. depending on sign of a, you may want to start from the beginning 
or end of the transformed array. For a==0 case, it does not matter what b's sign is.

class Solution {
public:
    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {
        //a > 0 upward open, a < 0, downward open parabola
        int n = nums.size();
        vector<int> res(n);
        auto quad = [](int x, int a, int b, int c) { return a * x * x + b * x + c; };
        
        //two pointer
        int l = 0, r = n - 1, i = a > 0 ? n - 1 : 0;
        while (l <= r) {
            if (a > 0)
                res[i--] = quad(nums[l], a, b, c) > quad(nums[r], a, b, c) ? quad(nums[l++], a, b, c) : quad(nums[r--], a, b, c);
            else
                res[i++] = quad(nums[l], a, b, c) < quad(nums[r], a, b, c) ? quad(nums[l++], a, b, c) : quad(nums[r--], a, b, c);
        }
        return res;
    }
};
