Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy 
the condition nums[i] + nums[j] + nums[k] < target.

Example:

Input: nums = [-2,0,1,3], and target = 2
Output: 2 
Explanation: Because there are two triplets which sums are less than 2:
             [-2,0,1]
             [-2,0,3]
Follow up: Could you solve it in O(n2) runtime?

//O(n^2)
class Solution {
public:
    int threeSumSmaller(vector<int>& nums, int target) {
        int n = nums.size();
        if (n < 3) return 0;
        
        sort(nums.begin(), nums.end());
        
        int count = 0;
        for (int i = 0; i < n - 2; ++i) {
            //for each num1, how many num2 + num3 < target - num1
            int t = target - nums[i], l = i + 1, r = n - 1;
            //O(n)
            while (l < r) {
                if (nums[l] + nums[r] < t) {
                    count += r - l;
                    l++;
                } else {
                    r--;
                }
            }
        }
        return count;        
    }
};
