Given a positive integer n and you can do operations as follow:

If n is even, replace n with n/2.
If n is odd, you can replace n with either n + 1 or n - 1.
What is the minimum number of replacements needed for n to become 1?

Example 1:

Input:
8

Output:
3

Explanation:
8 -> 4 -> 2 -> 1
Example 2:

Input:
7

Output:
4

Explanation:
7 -> 8 -> 4 -> 2 -> 1
or
7 -> 6 -> 3 -> 2 -> 1

If n is even, halve it.
If n=3 or n-1 has less 1's than n+1, decrement n. only check last two bit 11 -> 100, 01 - > 00
Otherwise, increment n.

class Solution {
public:
    int integerReplacement(int n) {
        unsigned int m = n;
        int count = 0;
        while (m > 1) {
            if ((m & 1) == 0)
                m >>= 1;
            else if (m == 3 || ((m >> 1) & 1) == 0) 
                m--;
            else 
                m++;
            
            count++;
        }
        return count;
    }
};
