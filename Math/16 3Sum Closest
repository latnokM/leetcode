Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. 
Return the sum of the three integers. You may assume that each input would have exactly one solution.

Example:

Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).

//O(n^2)
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        //simillar to threeSum, plus a variable to monitor closestSum
        sort(nums.begin(), nums.end());
        
        int closestSum = nums[0] + nums[1] + nums[2];
        int n = nums.size();
        for (int i = 0; i < n - 2; ++i) {
            //skip duplicate num1
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            
            int l = i + 1, r = n - 1;
            while (l < r) {
                int sum = nums[i] + nums[l] + nums[r];
                if (abs(target - sum) < abs(target - closestSum))
                    closestSum = sum;
                
                if (sum == target) {
                    return sum;
                } else if (sum < target) {
                    //skip duplicate num2
                    l++;
                    while (l < r && nums[l] == nums[l - 1]) l++;
                } else {
                    //skip duplicate num3
                    r--;
                    while (l < r && nums[r] == nums[r + 1]) r--;
                }
            }
        }
        return closestSum;
    }
};
