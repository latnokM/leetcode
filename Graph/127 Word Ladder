Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from 
beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

//BFS O(nl) n is size of wordList, l is length of word
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        //BFS
        //store wordList to set for lookup
        unordered_set<string> dictionary(wordList.begin(), wordList.end());
        if (!dictionary.count(endWord)) return 0;
        int res = 1, len = beginWord.size();
        queue<string> q;
        q.push(beginWord);
        while (!q.empty()) {
            res++;
            for (int k = q.size(); k > 0; --k) {
                string word = q.front();
                q.pop();
                for (int i = 0; i < len; ++i) {
                    string newWord = word;
                    for (char c = 'a'; c <= 'z'; ++c) {
                        newWord[i] = c;
                        if (newWord == endWord) return res;
                        if (newWord != word && dictionary.count(newWord)) {
                            q.push(newWord);
                            dictionary.erase(newWord); //avoid duplicate search
                        }
                    }
                }
            }
        }
        return 0;
    }
};
