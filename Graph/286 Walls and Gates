You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
//O(kmn), each node visited at most k times, k is number of gate
class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        //DFS on gate
        if (rooms.empty() || rooms[0].empty()) return;
        int m = rooms.size(), n = rooms[0].size();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (rooms[i][j] == 0)
                    dfs(rooms, i, j, 0);
            }
        }
    }
    
    void dfs(vector<vector<int>>& rooms, int row, int col, int val) {
        if (row < 0 || row >= rooms.size() || col < 0 || col >= rooms[row].size() || rooms[row][col] < val)
            return;
        rooms[row][col] = val;
        dfs(rooms, row - 1, col, val + 1);
        dfs(rooms, row + 1, col, val + 1);
        dfs(rooms, row, col - 1, val + 1);
        dfs(rooms, row, col + 1, val + 1);
    }
};

//BFS on gate, O(mn)
class Solution {
public:
    void wallsAndGates(vector<vector<int>>& rooms) {
        //add all gates to the queue, start BFS from all gates at same time so that distance is same for each loop
        queue<pair<int, int>> q;
        vector<vector<int>> dir{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        for (int i = 0; i < rooms.size(); ++i) {
            for (int j = 0; j < rooms[i].size(); ++j) {
                if (rooms[i][j] == 0) {
                    q.push({i, j});
                }
            }
        }
        while (!q.empty()) {
            int r = q.front().first, c = q.front().second;
            q.pop();
            for (int i = 0; i < dir.size(); ++i) {
                int x = r + dir[i][0], y = c + dir[i][1];
                if (x < 0 || x >= rooms.size() || y < 0 || y >= rooms[x].size() || rooms[x][y] < rooms[r][c] + 1)
                    continue;
                rooms[x][y] = rooms[r][c] + 1;
                q.push({x, y});
            }
        }
    }
};
