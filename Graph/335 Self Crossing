You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, 
then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. 
In other words, after each move your direction changes counter-clockwise.

Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.

Example 1:

┌───┐
│   │
└───┼──>
    │

Input: [2,1,1,2]
Output: true

class Solution {
public:
    bool isSelfCrossing(vector<int>& x) {
        for (int i = 3; i < x.size(); ++i) {
            //第一类是第四条边和第一条边相交的情况，需要满足的条件是第一条边大于等于第三条边，第四条边大于等于第二条边。
            //同样适用于第五条边和第二条边相交，第六条边和第三条边相交等等
            if (x[i - 3] >= x[i - 1] && x[i] >= x[i - 2])
                return true;
            //第二类是第五条边和第一条边重合相交的情况，需要满足的条件是第二条边和第四条边相等，第五条边大于等于第三条边和第一条边的差值，
            //样适用于第六条边和第二条边重合相交的情况等等
            if (i >= 4 && x[i - 1] == x[i - 3] && x[i] >= x[i - 2] - x[i - 4])
                return true;
            //第三类是第六条边和第一条边相交的情况，需要满足的条件是第四条边大于等于第二条边，第三条边大于等于第五条边，
            //第五条边大于等于第三条边和第一条边的差值，第六条边大于等于第四条边和第二条边的差值，
            //同样适用于第七条边和第二条边相交的情况等等
            if (i >= 5 && x[i-2] >= x[i-4] && x[i-3] >= x[i-1] &&
                x[i-1] >= x[i-3] - x[i-5] && x[i] >= x[i-2] - x[i-4])
                return true;
        }
        return false;
    }
};
