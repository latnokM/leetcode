There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain 
color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of
painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint 
all houses.

Note:
All costs are positive integers.

Example:

Input: [[1,5,3],[2,9,4]]
Output: 5
Explanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. 
             
Follow up:
Could you solve it in O(nk) runtime?



//O(nK*K) K is number of colors, n is number of houses
class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        //DP, dp[i][j] stores min cost of paint house i + 1 with color j
        if (costs.empty() || costs[0].empty()) return 0;
        int res = INT_MAX, n = costs.size(), k = costs[0].size();
        vector<vector<int>> dp(n, vector<int>(k, INT_MAX));
        dp[0] = costs[0];
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < k; ++j) {
                //to paint house i with color j, house i - 1 can has k - 1 colors except j
                for (int c = 0; c < k; ++c) {
                    if (c != j) {
                        dp[i][j] = min(dp[i][j], costs[i][j] + dp[i -1][c]);
                    }
                }
            }
        }
        for (const auto& cost : dp.back()) 
            res = min(res, cost);
        return res;
    }
};

//O(nK), space O(nK)
class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        //DP, dp[i][j] stores min cost of paint house i + 1 with color j
        //track min and second min cost colors for prev house
        if (costs.empty() || costs[0].empty()) return 0;
        int n = costs.size(), k = costs[0].size();
        int min1 = -1, min2 = -1; //two colors with min and second min cost
        vector<vector<int>> dp(n, vector<int>(k, INT_MAX));
        for (int i = 0; i < n; ++i) {
            int last1 = min1, last2 = min2; //min and second min for last house
            min1 = -1; min2 = -1;
            for (int j = 0; j < k; ++j) {
                if (j != last1) {
                    dp[i][j] = costs[i][j] + (last1 < 0 ? 0 : dp[i - 1][last1]);
                } else {
                    dp[i][j] = costs[i][j] + (last2 < 0 ? 0 : dp[i - 1][last2]);
                }
                if (min1 < 0 || dp[i][j] < dp[i][min1]) {
                    min2 = min1;
                    min1 = j;
                } else if (min2 < 0 || dp[i][j] < dp[i][min2]) {
                    min2 = j;
                }
            }
        }
        return dp.back()[min1];
    }
};


//O(nK), space O(1)
class Solution {
public:
    int minCostII(vector<vector<int>>& costs) {
        //DP, track min and second min cost colors for prev house
        if (costs.empty() || costs[0].empty()) return 0;
        int n = costs.size(), k = costs[0].size();
        int min1 = 0, min2 = 0, idx1 = -1; //total min and second min costs
        for (int i = 0; i < n; ++i) {
            int minCost1 = INT_MAX, minCost2 = minCost1, minColor = -1;
            for (int j = 0; j < k; ++j) {
                int cost = costs[i][j] + (j == idx1 ? min2 : min1);
                if (cost < minCost1) {
                    minCost2 = minCost1;
                    minCost1 = cost;
                    minColor = j;
                } else if (cost < minCost2) {
                    minCost2 = cost;
                }
            }
            min1 = minCost1;
            min2 = minCost2;
            idx1 = minColor;
        }
        return min1;
    }
};
