We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I'll tell you whether the number I picked is higher or lower.

However, when you guess a particular number x, and you guess wrong, you pay $x. You win the game when you guess the number I picked.

Example:

n = 10, I pick 8.

First round:  You guess 5, I tell you that it's higher. You pay $5.
Second round: You guess 7, I tell you that it's higher. You pay $7.
Third round:  You guess 9, I tell you that it's lower. You pay $9.

Game over. 8 is the number I picked.

You end up paying $5 + $7 + $9 = $21.
Given a particular n â‰¥ 1, find out how much money you need to have to guarantee a win.


//O(n^3)
class Solution {
public:
    int getMoneyAmount(int n) {
        //DP, minMax
        //for each range [i,j], use k to split the range into [i, k-1] and [k+1, j]
        //dp[i][j] = min of all local max (k + max(dp[i][k-1], dp[k+1][j]))
        //n = 4,  nums 1, 2, 3, 4
        //k = 1, worst cost = 1 + 3 = 4
        //k = 2, worst cost = 2 + 3 = 5
        //k = 3, cost = 3 + 1 = 4
        //k = 4, cost = 4 + 2 = 6
        // dp[1][4] = 4
        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));
        for (int j = 2; j <= n; ++j) {
            for (int i = j - 1; i > 0; --i) {
                int global_min = INT_MAX;
                for (int k = i + 1; k < j; ++k) {
                    int local_max = k + max(dp[i][k - 1], dp[k + 1][j]);
                    global_min = min(global_min, local_max);
                }
                dp[i][j] = i + 1 == j ? i : global_min;
            }
        }
        return dp[1][n];
    }
};
